#lang racket

(define (kwadraat x) (* x x))

(define (deelbaar? n deler)
  (= (remainder n deler) 0))

(define (kleinste-deler n)
  (define (kleinste-deler-iter n test-deler)
    (cond ((> (kwadraat test-deler) n) n)
          ((deelbaar? n test-deler) test-deler)
          (else (kleinste-deler-iter n (+ test-deler 1)))))
  (kleinste-deler-iter n 2))

(define (priemgetal? n)
  (= (kleinste-deler n) n))

(define (zoekpriemgetallen aantal vanaf)
  (if   (even? vanaf)
        (looppriem aantal (+ vanaf 1))
        (looppriem aantal vanaf)))

(define (looppriem aantal vanaf)
  (cond ((and(> aantal 0)(priemgetal? vanaf))
         (begin
           (timed-prime-test vanaf)
           (looppriem (- aantal 1) (+ vanaf 2))))
        ((not(priemgetal? vanaf))
         (looppriem aantal (+ vanaf 2)))
        ((= aantal 0)(begin
                       (newline)(display "Klaar")))))

(define (timed-prime-test n)
  (newline)
  (display n)
  (start-prime-test n (current-milliseconds)))
(define (start-prime-test n start-time)
  (if (priemgetal? n)
      (report-prime (- (current-milliseconds) start-time))
      (display " is geen priemgetal")))
(define (report-prime elapsed-time)
  (display " *** ")
  (display elapsed-time))